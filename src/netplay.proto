syntax = "proto3";

package netplay;
//option optimize_for = LITE_RUNTIME;


// Generic message packet
message Packet {
  oneof pkt {
    ServerEvent server_event = 1;
    ClientEvent client_event = 2;
    ClientCommand client_command = 3;
    ServerResponse server_response = 4;
  }
}


// Event broadcasted to clients
message ServerEvent {
  oneof pkt {
    PktInput input = 10;
    PktNewGarbage new_garbage = 11;
    PktUpdateGarbage update_garbage = 12;
    PktGarbageState garbage_state = 13;
    PktChat chat = 20;
    PktNotification notification = 21;
    PktServerConf server_conf = 30;
    PktServerState server_state = 31;
    PktPlayerJoin player_join = 40;
    PktPlayerConf player_conf = 41;
    PktPlayerState player_state = 42;
    PktPlayerRank player_rank = 43;
    PktPlayerField player_field = 44;
  }
}

// Event sent by client to the server
message ClientEvent {
  oneof pkt {
    PktInput input = 10;
    PktGarbageState garbage_state = 13;
  }
}

// Command sent by client to the server
// A ServerResponse is expected in return. It can be sent as soon as the
// command is validated, even if it has not been executed yet.
message ClientCommand {
  oneof pkt {
    PktChat chat = 20;
    PktPlayerJoin player_join = 40;
    PktPlayerConf player_conf = 41;
    PktPlayerState player_state = 42;
  }
}

// Server response to a ClientCommand
message ServerResponse {
  enum Result {
    OK = 0;
    ERROR = 1;
  }
  Result result = 1;
  string reason = 2;  // in case of error, its reason

  // Response data, if any
  // Field names correspond to command name, not field type
  oneof pkt {
    PktPlayerConf player_join = 40;
  }
}


// Chat message from a player
message PktChat {
  uint32 plid = 1;
  string text = 2;
}

// Server message
message PktNotification {
  enum Severity {
    MESSAGE = 0;
    NOTICE = 1;
    ERROR = 2;
    FATAL = 3;
  }
  string text = 1;
  Severity severity = 2;
}


// Field configuration
// If name is empty (the default) it is a custom configuration.
// Otherwise, name must be a valid configuration name and other fields
// may be ignored.
message FieldConf {
  // random color picking mode for raised lines
  enum RaiseAdjacent {
    NEVER = 0;
    ALWAYS = 1;
    ALTERNATE = 2;
  }
  string name = 1;
  repeated uint32 raise_speeds = 2;
  uint32 manual_raise_speed = 3;
  repeated uint32 raise_speed_changes = 18;
  uint32 swap_tk = 4;
  uint32 stop_combo_0 = 5;
  uint32 stop_combo_k = 6;
  uint32 stop_chain_0 = 7;
  uint32 stop_chain_k = 8;
  uint32 lost_tk = 9;
  uint32 gb_hang_tk = 10;
  uint32 flash_tk = 11;
  uint32 levitate_tk = 12;
  uint32 pop_tk = 13;
  uint32 pop0_tk = 14;
  uint32 transform_tk = 15;
  uint32 color_nb = 16;
  RaiseAdjacent raise_adjacent = 17;
}


////  Server

// Set server configuration
// Only valid in LOBBY client state.
// If field_confs is empty, current field configurations are not updated.
message PktServerConf {
  uint32 pl_nb_max = 1;
  uint32 tk_usec = 2;
  uint32 tk_lag_max = 3;
  uint32 tk_start_countdown = 4;
  repeated FieldConf field_confs = 10;
}

// Change server state
message PktServerState {
  enum State {
    NONE = 0;
    LOBBY = 1;  // no active match
    GAME_INIT = 2;  // match init are being sent
    GAME = 4;  // match is running
    GAME_READY = 3;  // init done, waiting for players to be ready
  }
  State state = 1;
}


////  Player and field

// Client join request
message PktPlayerJoin {
  string nick = 2;
}

// Set player configuration
// For new players, nick and field_conf must be set.
// In ClientCommand, only valid in LOBBY server state.
message PktPlayerConf {
  uint32 plid = 1;
  string nick = 2;
  FieldConf field_conf = 5;
}

// Change player state
message PktPlayerState {
  enum State {
    NONE = 0;
    QUIT = 1;  // left or is leaving the server
    LOBBY = 2;  // in the lobby
    LOBBY_READY = 3;  // in the lobby, ready to play
    GAME_READY = 5;  // init done, waiting for other players to be ready
    // states set on server state change, not needed in protocol
    GAME_INIT = 4;  // initializing game
    GAME = 6;  // in game
  }
  uint32 plid = 1;
  State state = 2;
}

// Rank a player's field
message PktPlayerRank {
  uint32 plid = 1;
  uint32 rank = 2; // 0: still playing, 1: first, 2: second ...
}

// Field description
// Sent before match starts to initialize fields.
message PktPlayerField {
  message BkColor {
    enum State {
      NONE = 0;
      REST = 1;
      FALL = 2;
      LAID = 3;
      LEVITATE = 4;
      FLASH = 5;
      MUTATE = 6;
      CLEARED = 7;
      TRANSFORMED = 8;
    }
    State state = 1;
    uint32 color = 2;
  }

  message BkGarbage {
    enum State {
      NONE = 0;
      REST = 1;
      FALL = 2;
      FLASH = 3;
      MUTATE = 4;
      TRANSFORMED = 5;
    }
    State state = 1;
    //TODO required uint32 garbage
  }

  // Block content
  // Either bk_color or bk_garbage must be set, but not both.
  message Block {
    BkColor bk_color = 1;
    BkGarbage bk_garbage = 2;
    bool swapped = 3;
    bool chaining = 4;
    uint32 ntick = 5;
  }

  uint32 plid = 1;
  fixed32 seed = 2;
  // Grid content, starting at (x,y) = (0,0)
  // repeat order: (0,0) (1,0) ... (0,1) (1,1) ...
  repeated Block blocks = 10;
}


// Input for a field
// Keys of skipped frames default to 0 (no input).
// If keys is empty, input for given tick is not provided but skipped frames
// are processed.
message PktInput {
  // keys field value is a OR-ed set of enum values
  enum Keys {
    NONE  =  0;
    UP    =  1;
    DOWN  =  2;
    LEFT  =  4;
    RIGHT =  8;
    SWAP  = 16;
    RAISE = 32;
  };
  uint32 plid = 1;
  uint32 tick = 2; // tick of the first given keys
  repeated uint32 keys = 3; // successive input keys
}


////  Garbages

enum GarbageType {
  NONE = 0;
  COMBO = 1;
  CHAIN = 2;
  SPECIAL = 3;
}

// New garbage
message PktNewGarbage {
  uint32 gbid = 1;
  uint32 plid_from = 2;
  uint32 plid_to = 3;
  uint32 pos = 4;
  GarbageType type = 5;
  uint32 size = 6;
}

// Update a garbage
// Only valid when garbage is hanging.
message PktUpdateGarbage {
  uint32 gbid = 1;
  uint32 plid_to = 3;
  uint32 pos = 4;
  uint32 size = 6;
}

// Change garbage state
message PktGarbageState {
  enum State {
    NONE = 0;
    WAIT = 1; // waiting for being dropped (requested by server)
    DROP = 2; // drop confirmed by client
  }
  uint32 gbid = 1;
  State state = 2;
}

